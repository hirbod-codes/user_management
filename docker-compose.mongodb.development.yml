version: '3.8'
volumes:
    user_management_replicaSet_p_data: {}
    user_management_replicaSet_p_config_data: {}
    user_management_replicaSet_s_1_data: {}
    user_management_replicaSet_s_1_config_data: {}
    user_management_replicaSet_s_2_data: {}
    user_management_replicaSet_s_2_config_data: {}
services:
    user_management:
        container_name: user_management
        build:
            context: ./
            dockerfile: ./src/user_management/Dockerfile.development
        command: bash -c "sleep 10s && dotnet watch run --no-restore"
        volumes:
            - ./src/user_management:/app:rw
        ports:
            - '${APP_HTTP_PORT}:5000'
            - '${APP_HTTPS_PORT}:5001'
        environment:
            USER_MANAGEMENT_MUST_NOT_USE_ENV_FILE: true
            USER_MANAGEMENT_ASPNETCORE_ENVIRONMENT: "${ENVIRONMENT}"
            USER_MANAGEMENT_ENVIRONMENT: "${ENVIRONMENT}"
            USER_MANAGEMENT_DOTNET_WATCH_RESTART_ON_RUDE_EDIT: true
            USER_MANAGEMENT_Logging__LogLevel__Default: "${Logging__LogLevel__Default}"
            USER_MANAGEMENT_Logging__LogLevel__Microsoft.AspNetCore: "${Logging__LogLevel__Microsoft_AspNetCore}"
            USER_MANAGEMENT_Jwt__SecretKey: "${Jwt__SecretKey}"
            USER_MANAGEMENT_DB_NAME: "${DB_NAME}"
            USER_MANAGEMENT_DB_OPTIONS__IsSharded: "${DB_OPTIONS__IsSharded}"
            USER_MANAGEMENT_DB_OPTIONS__CaPem: "${DB_OPTIONS__CaPem}"
            USER_MANAGEMENT_DB_OPTIONS__CertificateP12: "${DB_OPTIONS__CertificateP12}"
            USER_MANAGEMENT_DB_OPTIONS__DatabaseName: "${DB_OPTIONS__DatabaseName}"
            USER_MANAGEMENT_DB_OPTIONS__Host: "${DB_OPTIONS__Host}"
            USER_MANAGEMENT_DB_OPTIONS__Port: "${DB_OPTIONS__Port}"
            USER_MANAGEMENT_DB_OPTIONS__Username: "${DB_OPTIONS__Username}"
        depends_on:
            - user_management_replicaSet_p
    user_management_mongo_express:
        container_name: user_management_mongo_express
        image: mongo-express:0.54.0
        restart: always
        ports:
            - '${ME_CONTAINER_PORT}:8081'
        depends_on:
            - user_management_replicaSet_p
        environment:
            ME_CONFIG_BASICAUTH_USERNAME: "${ME_CONFIG_BASICAUTH_USERNAME}"
            ME_CONFIG_BASICAUTH_PASSWORD: "${ME_CONFIG_BASICAUTH_PASSWORD}"
            ME_CONFIG_MONGODB_SERVER: user_management_replicaSet_p
            ME_CONFIG_MONGODB_PORT: "${DB_SERVER_PORT}"
            ME_CONFIG_MONGODB_ENABLE_ADMIN: true
    user_management_replicaSet_p:
        container_name: user_management_replicaSet_p
        image: mongo:4.4.18
        ports:
          - "${DB_CONTAINER_PORT}:${DB_SERVER_PORT}"
        command: bash -c "/mongodb/rs_server.sh"
        environment:
            replSet: user_management_replicaSet
            member0: user_management_replicaSet_p
            member1: user_management_replicaSet_s_1
            member2: user_management_replicaSet_s_2
            dbPort: ${DB_SERVER_PORT}
            dbName: ${DB_DATABASE_NAME}
            dbAdminUsername: ${DB_USERNAME}
            dbUsername: ${CRT_USERNAME}
            dbPassword: ${DB_PASSWORD}
            tlsCertificateKeyFile: /security/app.pem
            tlsCAFile: /security/ca.pem
            tlsClusterFile: /security/member.pem
            tlsClusterCAFile: /security/ca.pem
            addLocalhostClient: true
        volumes:
            - user_management_replicaSet_p_data:/data/db
            - user_management_replicaSet_p_config_data:/data/configdb
            - ./mongodb/rs_server.sh:/mongodb/rs_server.sh
            - ./security/ca/ca.pem:/security/ca.pem
            - ./security/user_management_replicaSet_p/member.pem:/security/member.pem
            - ./security/user_management_replicaSet_p/app.pem:/security/app.pem
        healthcheck:
            test: test $$(echo "rs.initiate({_id:'my-replica-set',members:[{_id:0,host:\"mongo1:27017\"},{_id:1,host:\"mongo2:27017\"},{_id:2,host:\"mongo3:27017\"}]}).ok || rs.status().ok" | mongo --port 27017 --quiet) -eq 1
            interval: 10s
            start_period: 30s
    user_management_replicaSet_s_1:
        container_name: user_management_replicaSet_s_1
        image: mongo:4.4.18
        command: bash -c "/mongodb/secondary_rs_server.sh"
        environment:
            replSet: user_management_replicaSet
            dbPort: ${DB_SERVER_PORT}
            tlsCertificateKeyFile: /security/app.pem
            tlsCAFile: /security/ca.pem
            tlsClusterFile: /security/member.pem
            tlsClusterCAFile: /security/ca.pem
        volumes:
            - user_management_replicaSet_s_1_data:/data/db
            - user_management_replicaSet_s_1_config_data:/data/configdb
            - ./mongodb/secondary_rs_server.sh:/mongodb/secondary_rs_server.sh
            - ./security/ca/ca.pem:/security/ca.pem
            - ./security/user_management_replicaSet_s_1/member.pem:/security/member.pem
            - ./security/user_management_replicaSet_s_1/app.pem:/security/app.pem
        healthcheck:
            test: test $$(echo "rs.initiate({_id:'my-replica-set',members:[{_id:0,host:\"mongo1:27017\"},{_id:1,host:\"mongo2:27017\"},{_id:2,host:\"mongo3:27017\"}]}).ok || rs.status().ok" | mongo --port 27017 --quiet) -eq 1
            interval: 10s
            start_period: 30s
    user_management_replicaSet_s_2:
        container_name: user_management_replicaSet_s_2
        image: mongo:4.4.18
        command: bash -c "/mongodb/secondary_rs_server.sh"
        environment:
            replSet: user_management_replicaSet
            dbPort: ${DB_SERVER_PORT}
            tlsCertificateKeyFile: /security/app.pem
            tlsCAFile: /security/ca.pem
            tlsClusterFile: /security/member.pem
            tlsClusterCAFile: /security/ca.pem
        volumes:
            - user_management_replicaSet_s_2_data:/data/db
            - user_management_replicaSet_s_2_config_data:/data/configdb
            - ./mongodb/secondary_rs_server.sh:/mongodb/secondary_rs_server.sh
            - ./security/ca/ca.pem:/security/ca.pem
            - ./security/user_management_replicaSet_s_2/member.pem:/security/member.pem
            - ./security/user_management_replicaSet_s_2/app.pem:/security/app.pem
        healthcheck:
            test: test $$(echo "rs.initiate({_id:'my-replica-set',members:[{_id:0,host:\"mongo1:27017\"},{_id:1,host:\"mongo2:27017\"},{_id:2,host:\"mongo3:27017\"}]}).ok || rs.status().ok" | mongo --port 27017 --quiet) -eq 1
            interval: 10s
            start_period: 30s
